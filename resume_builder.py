import os
import re
import time
from typing import Dict, Any, List, Optional
from openai import OpenAI
from config import (
    OPENROUTER_API_KEY,
    OPENROUTER_BASE_URL,
    OPENROUTER_MODEL,
    OPENROUTER_TEMPERATURE,
    OPENROUTER_MAX_TOKENS,
    OPENROUTER_SITE_URL,
    OPENROUTER_SITE_NAME,
)
from utils import retry_with_backoff, handle_api_error, sanitize_input
from pdf_generator import generate_pdf_from_latex, get_sample_pdf_path
from logging_config import get_logger, log_function_call, log_file_operation, log_performance

# Initialize logger
logger = get_logger(__name__)


@log_function_call
def validate_resume_data(data: Dict[str, Any]) -> tuple[bool, str]:
    """Validate the resume data provided by user"""
    logger.info("Validating resume data")
    logger.debug(f"Data keys: {list(data.keys())}")
    
    required_fields = ["name", "education", "projects", "skills"]

    for field in required_fields:
        if not data.get(field):
            logger.error(f"Missing required field: {field}")
            return False, f"Missing required field: {field}"

    # Validate name
    name_length = len(data["name"].strip())
    logger.debug(f"Name length: {name_length}")
    if name_length < 2:
        logger.error(f"Name too short: {name_length} characters")
        return False, "Name must be at least 2 characters long"

    # Validate education
    education_count = len(data["education"]) if isinstance(data["education"], list) else 0
    logger.debug(f"Education entries: {education_count}")
    if not isinstance(data["education"], list) or education_count == 0:
        logger.error("Education must be a list with at least one entry")
        return False, "Education must be a list with at least one entry"

    # Validate projects
    projects_count = len(data["projects"]) if isinstance(data["projects"], list) else 0
    logger.debug(f"Project entries: {projects_count}")
    if not isinstance(data["projects"], list) or projects_count == 0:
        logger.error("Projects must be a list with at least one entry")
        return False, "Projects must be a list with at least one entry"

    # Validate skills
    skills_count = len(data["skills"]) if isinstance(data["skills"], dict) else 0
    logger.debug(f"Skills categories: {skills_count}")
    if not isinstance(data["skills"], dict) or not data["skills"]:
        logger.error("Skills must be provided")
        return False, "Skills must be provided"

    logger.info("Resume data validation successful")
    return True, ""


@log_function_call
def generate_latex_resume(data: Dict[str, Any]) -> str:
    """Generate LaTeX resume from user data"""
    start_time = time.time()
    logger.info("Starting LaTeX resume generation")
    logger.debug(f"Data keys: {list(data.keys())}")

    # Validate data first
    is_valid, error_msg = validate_resume_data(data)
    if not is_valid:
        logger.error(f"Data validation failed: {error_msg}")
        return f"Error: {error_msg}"

    logger.info("Data validation successful, proceeding with LaTeX generation")

    # Sanitize inputs
    logger.debug("Sanitizing input data")
    name = sanitize_input(data["name"])
    email = sanitize_input(data.get("email", ""))
    phone = sanitize_input(data.get("phone", ""))
    linkedin = sanitize_input(data.get("linkedin", ""))
    github = sanitize_input(data.get("github", ""))

    # Generate LaTeX content
    logger.info("Generating LaTeX content sections")
    latex_content = generate_latex_header()
    latex_content += generate_heading_section(name, email, phone, linkedin, github)
    latex_content += generate_education_section(data["education"])

    if data.get("experience"):
        logger.debug("Adding experience section")
        latex_content += generate_experience_section(data["experience"])

    latex_content += generate_projects_section(data["projects"])
    latex_content += generate_skills_section(data["skills"])

    if data.get("research_papers"):
        logger.debug("Adding research papers section")
        latex_content += generate_research_section(data["research_papers"])

    if data.get("achievements"):
        logger.debug("Adding achievements section")
        latex_content += generate_achievements_section(data["achievements"])

    if data.get("others"):
        logger.debug("Adding others section")
        latex_content += generate_others_section(data["others"])

    latex_content += generate_latex_footer()

    latex_length = len(latex_content)
    logger.info(f"LaTeX resume generation completed. Content length: {latex_length} characters")
    
    duration = time.time() - start_time
    log_performance("LaTeX resume generation", duration, f"Generated {latex_length} characters of LaTeX content")
    
    return latex_content


def generate_latex_header() -> str:
    """Generate LaTeX document header"""
    return r"""%-------------------------
% Resume in Latex
% Author : Generated by HireVision
% Based off of: https://github.com/jakeryang/resume
% License : MIT
%------------------------

\documentclass[letterpaper,11pt]{article}

\usepackage{latexsym}
\usepackage[empty]{fullpage}
\usepackage{titlesec}
\usepackage{marvosym}
\usepackage[usenames,dvipsnames]{color}
\usepackage{verbatim}
\usepackage{enumitem}
\usepackage[hidelinks]{hyperref}
\usepackage{fancyhdr}
\usepackage[english]{babel}
\usepackage{tabularx}
\input{glyphtounicode}


%----------FONT OPTIONS----------
% sans-serif
% \usepackage[sfdefault]{FiraSans}
% \usepackage[sfdefault]{roboto}
% \usepackage[sfdefault]{noto-sans}
% \usepackage[default]{sourcesanspro}

% serif
% \usepackage{CormorantGaramond}
% \usepackage{charter}


\pagestyle{fancy}
\fancyhf{} % clear all header and footer fields
\fancyfoot{}
\renewcommand{\headrulewidth}{0pt}
\renewcommand{\footrulewidth}{0pt}

% Adjust margins
\addtolength{\oddsidemargin}{-0.5in}
\addtolength{\evensidemargin}{-0.5in}
\addtolength{\textwidth}{1in}
\addtolength{\topmargin}{-.5in}
\addtolength{\textheight}{1.0in}

\urlstyle{same}

\raggedbottom
\raggedright
\setlength{\tabcolsep}{0in}

% Sections formatting
\titleformat{\section}{
  \vspace{-4pt}\scshape\raggedright\large
}{}{0em}{}[\color{black}\titlerule \vspace{-5pt}]

% Ensure that generate pdf is machine readable/ATS parsable
\pdfgentounicode=1

%-------------------------
% Custom commands
\newcommand{\resumeItem}[1]{
  \item\small{
    {#1 \vspace{-2pt}}
  }
}

\newcommand{\resumeSubheading}[4]{
  \vspace{-2pt}\item
    \begin{tabular*}{0.97\textwidth}[t]{l@{\extracolsep{\fill}}r}
      \textbf{#1} & #2 \\
      \textit{\small#3} & \textit{\small #4} \\
    \end{tabular*}\vspace{-7pt}
}

\newcommand{\resumeSubSubheading}[2]{
    \item
    \begin{tabular*}{0.97\textwidth}{l@{\extracolsep{\fill}}r}
      \textit{\small#1} & \textit{\small #2} \\
    \end{tabular*}\vspace{-7pt}
}

\newcommand{\resumeProjectHeading}[2]{
    \item
    \begin{tabular*}{0.97\textwidth}{l@{\extracolsep{\fill}}r}
      \small#1 & #2 \\
    \end{tabular*}\vspace{-7pt}
}

\newcommand{\resumeSubItem}[1]{\resumeItem{#1}\vspace{-4pt}}

\renewcommand\labelitemii{$\vcenter{\hbox{\tiny$\bullet$}}$}

\newcommand{\resumeSubHeadingListStart}{\begin{itemize}[leftmargin=0.15in, label={}]}
\newcommand{\resumeSubHeadingListEnd}{\end{itemize}}
\newcommand{\resumeItemListStart}{\begin{itemize}}
\newcommand{\resumeItemListEnd}{\end{itemize}\vspace{-5pt}}

%-------------------------------------------
%%%%%%  RESUME STARTS HERE  %%%%%%%%%%%%%%%%%%%%%%%%%%%%


\begin{document}

"""


def generate_heading_section(
    name: str, email: str, phone: str, linkedin: str, github: str
) -> str:
    """Generate the heading section with contact information"""
    contact_parts = []

    if phone:
        contact_parts.append(phone)
    if email:
        contact_parts.append(f"\\href{{mailto:{email}}}{{\\underline{{{email}}}}}")
    if linkedin:
        contact_parts.append(f"\\href{{{linkedin}}}{{\\underline{{{linkedin}}}}}")
    if github:
        contact_parts.append(f"\\href{{{github}}}{{\\underline{{{github}}}}}")

    contact_line = " $|$ ".join(contact_parts) if contact_parts else ""

    return f"""
%----------HEADING----------
\\begin{{center}}
    \\textbf{{\\Huge \\scshape {name}}} \\\\ \\vspace{{1pt}}
    \\small {contact_line}
\\end{{center}}

"""


def generate_education_section(education: List[Dict[str, Any]]) -> str:
    """Generate education section"""
    latex = "\n%-----------EDUCATION-----------\n\\section{Education}\n  \\resumeSubHeadingListStart\n"

    for edu in education:
        institution = sanitize_input(edu.get("institution", ""))
        location = sanitize_input(edu.get("location", ""))
        degree = sanitize_input(edu.get("degree", ""))
        duration = sanitize_input(edu.get("duration", ""))

        if institution and degree:
            latex += f"    \\resumeSubheading\n      {{{institution}}}{{{location}}}\n      {{{degree}}}{{{duration}}}\n"

    latex += "  \\resumeSubHeadingListEnd\n"
    return latex


def generate_experience_section(experience: List[Dict[str, Any]]) -> str:
    """Generate experience section"""
    latex = "\n%-----------EXPERIENCE-----------\n\\section{Experience}\n  \\resumeSubHeadingListStart\n"

    for exp in experience:
        title = sanitize_input(exp.get("title", ""))
        company = sanitize_input(exp.get("company", ""))
        location = sanitize_input(exp.get("location", ""))
        duration = sanitize_input(exp.get("duration", ""))
        description = exp.get("description", [])
        positions = exp.get("positions", [])  # For multiple positions at same company

        if title and company:
            latex += f"\n    \\resumeSubheading\n      {{{title}}}{{{duration}}}\n      {{{company}}}{{{location}}}\n"

            if description:
                latex += "      \\resumeItemListStart\n"
                for item in description:
                    if isinstance(item, str):
                        latex += f"        \\resumeItem{{{sanitize_input(item)}}}\n"
                latex += "      \\resumeItemListEnd\n"

            # Handle multiple positions at the same company
            if positions:
                for position in positions:
                    pos_title = sanitize_input(position.get("title", ""))
                    pos_duration = sanitize_input(position.get("duration", ""))
                    pos_description = position.get("description", [])

                    if pos_title:
                        latex += (
                            f"\n% -----------Multiple Positions Heading-----------\n"
                        )
                        latex += f"    \\resumeSubSubheading\n"
                        latex += f"     {{{pos_title}}}{{{pos_duration}}}\n"
                        if pos_description:
                            latex += "     \\resumeItemListStart\n"
                            for item in pos_description:
                                if isinstance(item, str):
                                    latex += f"        \\resumeItem{{{sanitize_input(item)}}}\n"
                            latex += "     \\resumeItemListEnd\n"
                        latex += "    \\resumeSubHeadingListEnd\n"
                        latex += "%-------------------------------------------\n"

    latex += "\n  \\resumeSubHeadingListEnd\n"
    return latex


def generate_projects_section(projects: List[Dict[str, Any]]) -> str:
    """Generate projects section"""
    latex = "\n%-----------PROJECTS-----------\n\\section{Projects}\n    \\resumeSubHeadingListStart\n"

    for project in projects:
        name = sanitize_input(project.get("name", ""))
        tech_stack = sanitize_input(project.get("tech_stack", ""))
        description = project.get("description", [])

        if name:
            tech_info = f" $|$ \\emph{{{tech_stack}}}" if tech_stack else ""
            latex += f"      \\resumeProjectHeading\n          {{\\textbf{{{name}}}{tech_info}}}\n"

            if description:
                latex += "          \\resumeItemListStart\n"
                for item in description:
                    if isinstance(item, str):
                        latex += f"            \\resumeItem{{{sanitize_input(item)}}}\n"
                latex += "          \\resumeItemListEnd\n"

    latex += "    \\resumeSubHeadingListEnd\n"
    return latex


def generate_skills_section(skills: Dict[str, List[str]]) -> str:
    """Generate skills section"""
    latex = "\n%-----------PROGRAMMING SKILLS-----------\n\\section{Technical Skills}\n \\begin{itemize}[leftmargin=0.15in, label={}]\n    \\small{\\item{\n"

    skill_lines = []
    for category, skill_list in skills.items():
        if skill_list:
            skills_str = ", ".join([sanitize_input(skill) for skill in skill_list])
            skill_lines.append(f"     \\textbf{{{category}}}{{: {skills_str}}} \\\\")

    latex += "\n".join(skill_lines)
    latex += "\n    }}\n \\end{itemize}\n"
    return latex


def generate_research_section(research_papers: List[Dict[str, Any]]) -> str:
    """Generate research papers section"""
    latex = "\n%-----------RESEARCH PAPERS-----------\n\\section{Research Papers}\n  \\resumeSubHeadingListStart\n"

    # Handle case where research_papers might be empty or None
    if not research_papers:
        latex += "  \\resumeSubHeadingListEnd\n"
        return latex

    for paper in research_papers:
        # Handle case where paper might be a string instead of dict
        if isinstance(paper, str):
            logger.warning(f"Research paper is a string instead of dict: {paper}")
            continue
            
        if not isinstance(paper, dict):
            logger.warning(f"Research paper is not a dict: {type(paper)}")
            continue
            
        title = sanitize_input(paper.get("title", ""))
        authors = sanitize_input(paper.get("authors", ""))
        journal = sanitize_input(paper.get("journal", ""))
        year = sanitize_input(paper.get("year", ""))

        if title:
            latex += f"    \\resumeSubheading\n      {{{title}}}{{{year}}}\n      {{{authors}}}{{{journal}}}\n"

    latex += "  \\resumeSubHeadingListEnd\n"
    return latex


def generate_achievements_section(achievements: List[str]) -> str:
    """Generate achievements section"""
    latex = "\n%-----------ACHIEVEMENTS-----------\n\\section{Achievements}\n \\begin{itemize}[leftmargin=0.15in, label={}]\n"

    # Handle case where achievements might be empty or None
    if not achievements:
        latex += " \\end{itemize}\n"
        return latex

    for achievement in achievements:
        if isinstance(achievement, str) and achievement.strip():
            latex += f"    \\small{{\\item{{{sanitize_input(achievement)}}}}}\n"

    latex += " \\end{itemize}\n"
    return latex


def generate_others_section(others: List[str]) -> str:
    """Generate others section"""
    latex = "\n%-----------OTHERS-----------\n\\section{Others}\n \\begin{itemize}[leftmargin=0.15in, label={}]\n"

    # Handle case where others might be empty or None
    if not others:
        latex += " \\end{itemize}\n"
        return latex

    for item in others:
        if isinstance(item, str) and item.strip():
            latex += f"    \\small{{\\item{{{sanitize_input(item)}}}}}\n"

    latex += " \\end{itemize}\n"
    return latex


def generate_latex_footer() -> str:
    """Generate LaTeX document footer"""
    return "\n%-------------------------------------------\n\\end{document}"


@log_function_call
def process_resume_builder(
    name,
    email,
    phone,
    linkedin,
    github,
    education,
    experience,
    projects,
    skills,
    research_papers,
    achievements,
    others,
):
    """Main function to process resume building with error handling"""
    start_time = time.time()
    logger.info("Starting resume builder process")
    logger.debug(f"Name: {name}, Email: {email}")
    
    try:
        import json

        # Parse JSON inputs
        user_data = {
            "name": name,
            "email": email,
            "phone": phone,
            "linkedin": linkedin,
            "github": github,
        }

        # Parse education
        logger.info("Parsing education data")
        try:
            if education and education.strip():
                user_data["education"] = json.loads(education)
                logger.debug(f"Education entries: {len(user_data['education'])}")
            else:
                logger.error("Education is required but not provided")
                return (
                    "## ❌ Error\n\nEducation is required. Please provide at least one education entry.",
                    None,
                )
        except json.JSONDecodeError as e:
            logger.error(f"Invalid JSON format in Education field: {e}")
            return (
                "## ❌ Error\n\nInvalid JSON format in Education field. Please check the format and try again.",
                None,
            )

        # Parse experience (optional)
        logger.info("Parsing experience data")
        try:
            if experience and experience.strip():
                user_data["experience"] = json.loads(experience)
                logger.debug(f"Experience entries: {len(user_data['experience'])}")
        except json.JSONDecodeError as e:
            logger.error(f"Invalid JSON format in Experience field: {e}")
            return (
                "## ❌ Error\n\nInvalid JSON format in Experience field. Please check the format and try again.",
                None,
            )

        # Parse projects
        logger.info("Parsing projects data")
        try:
            if projects and projects.strip():
                user_data["projects"] = json.loads(projects)
                logger.debug(f"Project entries: {len(user_data['projects'])}")
            else:
                logger.error("Projects are required but not provided")
                return (
                    "## ❌ Error\n\nProjects are required. Please provide at least one project.",
                    None,
                )
        except json.JSONDecodeError as e:
            logger.error(f"Invalid JSON format in Projects field: {e}")
            return (
                "## ❌ Error\n\nInvalid JSON format in Projects field. Please check the format and try again.",
                None,
            )

        # Parse skills
        logger.info("Parsing skills data")
        try:
            if skills and skills.strip():
                user_data["skills"] = json.loads(skills)
                logger.debug(f"Skills categories: {len(user_data['skills'])}")
            else:
                logger.error("Skills are required but not provided")
                return (
                    "## ❌ Error\n\nSkills are required. Please provide your skills.",
                    None,
                )
        except json.JSONDecodeError as e:
            logger.error(f"Invalid JSON format in Skills field: {e}")
            return (
                "## ❌ Error\n\nInvalid JSON format in Skills field. Please check the format and try again.",
                None,
            )

        # Parse optional sections
        logger.info("Parsing optional sections")
        try:
            if research_papers and research_papers.strip():
                user_data["research_papers"] = json.loads(research_papers)
                logger.debug(f"Research papers: {len(user_data['research_papers'])}")
        except json.JSONDecodeError as e:
            logger.error(f"Invalid JSON format in Research Papers field: {e}")
            return (
                "## ❌ Error\n\nInvalid JSON format in Research Papers field. Please check the format and try again.",
                None,
            )

        try:
            if achievements and achievements.strip():
                user_data["achievements"] = json.loads(achievements)
                logger.debug(f"Achievements: {len(user_data['achievements'])}")
        except json.JSONDecodeError as e:
            logger.error(f"Invalid JSON format in Achievements field: {e}")
            return (
                "## ❌ Error\n\nInvalid JSON format in Achievements field. Please check the format and try again.",
                None,
            )

        try:
            if others and others.strip():
                user_data["others"] = json.loads(others)
                logger.debug(f"Others: {len(user_data['others'])}")
        except json.JSONDecodeError as e:
            logger.error(f"Invalid JSON format in Others field: {e}")
            return (
                "## ❌ Error\n\nInvalid JSON format in Others field. Please check the format and try again.",
                None,
            )

        # Generate LaTeX resume
        logger.info("Generating LaTeX resume")
        latex_content = generate_latex_resume(user_data)

        if latex_content.startswith("Error:"):
            logger.error(f"LaTeX generation failed: {latex_content}")
            return f"## ❌ Resume Generation Error\n\n{latex_content}", None

        # Generate PDF
        logger.info("Generating PDF from LaTeX")
        pdf_path = generate_pdf_from_latex(latex_content)
        
        if pdf_path:
            logger.info(f"PDF generated successfully: {pdf_path}")
            log_file_operation("PDF generation", pdf_path, success=True)
        else:
            logger.warning("PDF generation failed, returning LaTeX content only")

        duration = time.time() - start_time
        logger.info(f"Resume builder process completed successfully in {duration:.3f}s")
        log_performance("Complete resume builder process", duration, f"Generated resume for {name}")

        # Return both LaTeX content and PDF path
        return latex_content, pdf_path

    except Exception as e:
        duration = time.time() - start_time
        logger.error(f"Resume builder process failed after {duration:.3f}s: {str(e)}", exc_info=True)
        error_message = handle_api_error(e)
        return (
            f"## ❌ Unexpected Error\n\n{error_message}\n\nPlease try again or contact support if the issue persists.",
            None,
        )
